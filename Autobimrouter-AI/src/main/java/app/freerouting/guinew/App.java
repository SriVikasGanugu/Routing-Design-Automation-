/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app.freerouting.guinew;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.Locale;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.DefaultServlet;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.glassfish.jersey.servlet.ServletContainer;

import app.freerouting.api.AppContextListener;
import app.freerouting.constants.Constants;
import app.freerouting.logger.FRLogger;
import app.freerouting.management.FRAnalytics;
import app.freerouting.settings.ApiServerSettings;
import app.freerouting.settings.GlobalSettings;


/**
 * The main application that creates the main user interface.
 *
 * @author Austin Kwon
 * @since 2024-10-05
 */
public class App {
    static final String WEB_FILE_BASE_NAME = "http://www.freerouting.app";
    static final String VERSION_NUMBER_STRING = "v" + Constants.FREEROUTING_VERSION + " (build-date: " + Constants.FREEROUTING_BUILD_DATE + ")";
    public static GlobalSettings globalSettings;

    public String getGreeting() {
        return "Hello World!";
    }

    private static void InitializeAPI(ApiServerSettings apiServerSettings) {
        System.out.println("InitializeAPI() called!");
        // Check if there are any endpoints defined
        if (apiServerSettings.endpoints.length == 0) {
            FRLogger.warn("Can't start API server, because no endpoints are defined in ApiServerSettings.");
            return;
        }

        // Convert the first endpoint (e.g. "https://localhost:8080") in ApiServerSettings to InetSocketAddress
        String endpoint = apiServerSettings.endpoints[0].toLowerCase();
        // Endpoints following the following format: "protocol://host:port" (although the protocol is not used in this case, because only HTTP/HTTPS is supported)
        String[] endpointParts = endpoint.split("://");
        String protocol = endpointParts[0];
        String hostAndPort = endpointParts[1];
        String[] hostAndPortParts = hostAndPort.split(":");
        String host = hostAndPortParts[0];
        int port = Integer.parseInt(hostAndPortParts[1]);

        // Check if the protocol is HTTP or HTTPS
        if (!protocol.equals("http") && !protocol.equals("https")) {
            FRLogger.warn("Can't use the endpoint '%s' for the API server, because its protocol is not HTTP or HTTPS.".formatted(endpoint));
            return;
        }

        // Start the Jetty server
        InetSocketAddress address = new InetSocketAddress(host, port);
        Server server = new Server(address);
        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
        context.setContextPath("/");
        server.setHandler(context);

        // Set up Jersey Servlet
        ServletHolder jerseyServlet = context.addServlet(ServletContainer.class, "/api/*");
        jerseyServlet.setInitOrder(0);
        jerseyServlet.setInitParameter("jersey.config.server.provider.packages", "app.freerouting.api");
        jerseyServlet.setInitParameter("javax.ws.rs.Application", "app.freerouting.JerseyConfig");
        jerseyServlet.setInitParameter("javax.ws.rs.Application", "app.freerouting.api.OpenAPIConfig");

        // Add the DefaultServlet to handle static content
        ServletHolder defaultServlet = new ServletHolder("defaultServlet", DefaultServlet.class);
        context.addServlet(defaultServlet, "/");

        // Add Context Listeners
        context.addEventListener(new AppContextListener());

        try {
            server.start();
            server.join();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static void saveSettings() throws IOException {
        GlobalSettings.save(globalSettings);
    }


    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        try {
            globalSettings = GlobalSettings.load();
            FRLogger.info("Settings were loaded from freerouting.json");
        } catch (Exception e) {
            // we don't want to stop if the configuration file doesn't exist
        }


        if (globalSettings == null) {
            globalSettings = new GlobalSettings();

            // save the default values
            try {
                GlobalSettings.save(globalSettings);
                System.out.println("Global settings saved!");
            } catch (Exception e) {
                // it's ok if we can't save the configuration file
                System.out.println("Can't save global settings!");
            }

            globalSettings.parseCommandLineArguments(args);

            if (globalSettings.apiServerSettings.isEnabled) {
                InitializeAPI(globalSettings.apiServerSettings);
            }
        }

        // Get default screen device
        Toolkit toolkit = Toolkit.getDefaultToolkit();

        // Get screen resolution
        Dimension screenSize = toolkit.getScreenSize();
        int width = screenSize.width;
        int height = screenSize.height;

        // Get screen DPI
        int dpi = toolkit.getScreenResolution();
        FRLogger.debug(" Screen: " + width + "x" + height + ", " + dpi + " DPI");

        // initialize analytics
        FRAnalytics.setWriteKey(Constants.FREEROUTING_VERSION, "G24pcCv4BmnqwBa8LsdODYRE6k9IAlqR");
        int analyticsModulo = Math.max(globalSettings.usageAndDiagnosticData.analytics_modulo, 1);
        String userIdString = globalSettings.usageAndDiagnosticData.user_id.length() >= 4 ? globalSettings.usageAndDiagnosticData.user_id.substring(0, 4) : "0000";
        int userIdValue = Integer.parseInt(userIdString, 16);
        boolean allowAnalytics = !globalSettings.usageAndDiagnosticData.disable_analytics && (userIdValue % analyticsModulo == 0);
        if (!allowAnalytics) {
            FRLogger.debug("Analytics are disabled");
        }
        FRAnalytics.setEnabled(allowAnalytics);
        FRAnalytics.setUserId(globalSettings.usageAndDiagnosticData.user_id);
        FRAnalytics.identify();
        try {
            Thread.sleep(1000);
        } catch (Exception ignored) {
        }
        FRAnalytics.setAppLocation("app.freerouting.guinew", "Freerouting");
        FRAnalytics.appStarted(Constants.FREEROUTING_VERSION, Constants.FREEROUTING_BUILD_DATE, String.join(" ", args), System.getProperty("os.name"), System.getProperty("os.arch"), System.getProperty("os.version"), System.getProperty("java.version"), System.getProperty("java.vendor"), Locale.getDefault(), globalSettings.current_locale, Runtime.getRuntime().availableProcessors(), (Runtime.getRuntime().maxMemory() / 1024 / 1024), globalSettings.host, width, height, dpi);

        MainFrame frame = new MainFrame(globalSettings);
            // frame.rerenderComponents();
    }
}
